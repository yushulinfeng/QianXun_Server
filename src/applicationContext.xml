<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
						http://www.springframework.org/schema/context 
           				http://www.springframework.org/schema/context/spring-context-3.0.xsd 
         				http://www.springframework.org/schema/tx 
           				">
	<!-- http://www.springframework.org/schema/tx/spring-tx-3.0.xsd -->

<!-- org.springframework.orm.hibernate3.LocalSessionFactoryBean -->
<!-- 最初设置 ： org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="annotatedClasses">
			<list>
				<value>domain.User</value>
				<value>domain.UserRequest</value>
				<value>domain.UserComment</value>
				<value>domain.Photo</value>
				<value>domain.Video</value>
				<value>domain.UserVerify</value>
				<value>domain.StudentVerify</value>
				<value>domain.Admin</value>
				<value>domain.PropImage</value>
				<value>domain.Dynamic</value>
				<value>domain.BusinessService</value>
				<value>domain.ServiceImage</value>
				<value>domain.UserGetService</value>
				<value>domain.UserAccount</value>
				<value>domain.TradeRecord</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver" /> <property 
		name="url" value="jdbc:mysql://121.42.157.195/qianxun?characterEncoding=utf8" 
		/> <property name="username" value="root" /> <property name="password" value="505306581" 
		/> -->

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://127.0.0.1/qianxun?characterEncoding=utf8" />
		<property name="user" value="root" />
		<property name="password" value="root" />

<!-- 
		<property name="hibernate.c3p0.privilegeSpawnedThreads">
			<value>true</value> 
		</property>
		<property name="hibernate.c3p0.contextClassLoaderSource">
			<value>library</value>
		</property>
 -->
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>10</value>
		</property>

		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>30</value>
		</property>

		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>10</value>
		</property>

		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>1000</value>
		</property>

		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>3</value>
		</property>

		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>0</value>
		</property>
		<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->
		<property name="maxStatementsPerConnection">
			<value>0</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>60</value>
		</property>

		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>

		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>

		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>

	<!-- <bean id="log" class="util.LogUtil"></bean> -->

	<!-- 配置DAO -->
	<bean id="userDAO" class="dao.impl.UserDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="userRequestDAO" class="dao.impl.UserRequestDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="userCommentDAO" class="dao.impl.UserCommentDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="photoDAO" class="dao.impl.PhotoDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="videoDAO" class="dao.impl.VideoDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="userVerifyDAO" class="dao.impl.UserVerifyDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="studentVerifyDAO" class="dao.impl.StudentVerifyDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="adminDAO" class="dao.impl.AdminDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="propDAO" class="dao.impl.PropDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="businessServiceDAO" class="dao.impl.BusinessServiceDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="userGetServiceDAO" class="dao.impl.UserGetServiceDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="dynamicDAO" class="dao.impl.DynamicDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="tradeRecordDAO" class="dao.impl.TradeRecordDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="userAccountDAO" class="dao.impl.UserAccountDAOImpl">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	

	<!-- 配置Service -->
	<bean id="userService" class="service.impl.UserServiceImpl">
		<property name="userDAO">
			<ref bean="userDAO" />
		</property>
		<property name="userAccountDAO">
			<ref bean="userAccountDAO" />
		</property>
		
	</bean>
	<bean id="userRequestService" class="service.impl.UserRequestServiceImpl">
		<property name="userRequestDAO">
			<ref bean="userRequestDAO" />
		</property>
	</bean>
	<bean id="userCommentService" class="service.impl.UserCommentServiceImpl">
		<property name="userCommentDAO">
			<ref bean="userCommentDAO" />
		</property>
	</bean>
	<bean id="photoService" class="service.impl.PhotoServiceImpl">
		<property name="photoDAO">
			<ref bean="photoDAO" />
		</property>
	</bean>
	<bean id="videoService" class="service.impl.VideoServiceImpl">
		<property name="videoDAO">
			<ref bean="videoDAO" />
		</property>
	</bean>
	<bean id="userVerifyService" class="service.impl.UserVerifyServiceImpl">
		<property name="userVerifyDAO">
			<ref bean="userVerifyDAO" />
		</property>
	</bean>
	<bean id="studentVerifyService" class="service.impl.StudentVerifyServiceImpl">
		<property name="studentVerifyDAO">
			<ref bean="studentVerifyDAO" />
		</property>
	</bean>
	<bean id="businessServiceService" class="service.impl.BusinessServiceServiceImpl">
		<property name="businessServiceDAO">
			<ref bean="businessServiceDAO" />
		</property>
	</bean>
	<bean id="userGetServiceService" class="service.impl.UserGetServiceServiceImpl">
		<property name="userGetServiceDAO">
			<ref bean="userGetServiceDAO" />
		</property>
	</bean>
	<bean id="dynamicService" class="service.impl.DynamicServiceImpl">
		<property name="dynamicDAO">
			<ref bean="dynamicDAO" />
		</property>
	</bean>
	<bean id="tradeRecordService" class="service.impl.TradeRecordServiceImpl">
		<property name="tradeRecordDAO">
			<ref bean="tradeRecordDAO" />
		</property>
	</bean>
	<bean id="userAccountService" class="service.impl.UserAccountServiceImpl">
		<property name="userAccountDAO">
			<ref bean="userAccountDAO" />
		</property>
	</bean>

	<!-- 配置Action -->
	<bean id="userRegistAction" class="controller.UserRegistAction">
		<property name="userService">
			<ref bean="userService" />
		</property>
	</bean>
	<bean id="userLoginAction" class="controller.UserLoginAction">
		<property name="userService">
			<ref bean="userService" />
		</property>
	</bean>
	<bean id="userInfoAction" class="controller.UserInfoAction">
		<property name="userService">
			<ref bean="userService" />
		</property>
		<property name="businessServiceService">
			<ref bean="businessServiceService" />
		</property>
	</bean>
	<bean id="userRequestAction" class="controller.UserRequestAction">
		<property name="userRequestService">
			<ref bean="userRequestService" />
		</property>
		<property name="userService">
			<ref bean="userService" />
		</property>
	</bean>
	<bean id="userCommentAction" class="controller.UserCommentAction">
		<property name="userCommentService">
			<ref bean="userCommentService" />
		</property>
		<property name="userRequestService">
			<ref bean="userRequestService" />
		</property>
		<property name="userService">
			<ref bean="userService" />
		</property>
	</bean>
	<bean id="photoAction" class="controller.PhotoAction">
		<property name="photoService">
			<ref bean="photoService" />
		</property>
	</bean>
	<bean id="videoAction" class="controller.VideoAction">
		<property name="videoService">
			<ref bean="videoService" />
		</property>
	</bean>
	<bean id="userVerifyAction" class="controller.UserVerifyAction">
		<property name="userVerifyService">
			<ref bean="userVerifyService" />
		</property>
		<property name="studentVerifyService">
			<ref bean="studentVerifyService" />
		</property>
		<property name="userService">
			<ref bean="userService" />
		</property>
		<property name="adminDAO">
			<ref bean="adminDAO" />
		</property>
	</bean>
	<bean id="propAction" class="controller.PropAction">
		<property name="propDAO">
			<ref bean="propDAO" />
		</property>
	</bean>
	<bean id="businessServiceAction" class="controller.BusinessServiceAction">
		<property name="businessServiceService">
			<ref bean="businessServiceService" />
		</property>
	</bean>
	<bean id="userGetServiceAction" class="controller.UserGetServiceAction">
		<property name="userGetServiceService">
			<ref bean="userGetServiceService" />
		</property>
		<property name="businessServiceService">
			<ref bean="businessServiceService" />
		</property>
		<property name="userAccountService">
			<ref bean="userAccountService" />
		</property>	
		<property name="userService">
			<ref bean="userService" />
		</property>
	</bean>
	<bean id="dynamicAction" class="controller.DynamicAction">
		<property name="dynamicService">
			<ref bean="dynamicService" />
		</property>
	</bean>
	<bean id="tradeAction" class="controller.TradeAction">
		<property name="tradeRecordService">
			<ref bean="tradeRecordService" />
		</property>
		<property name="userAccountService">
			<ref bean="userAccountService" />
		</property>
	</bean>
	<bean id="alipayAction" class="controller.AlipayAction">
	</bean>
	<bean id="fileAction" class="controller.FileAction">
		<property name="tradeRecordService">
			<ref bean="tradeRecordService" />
		</property>
	</bean>
	<bean id="adminOpAction" class="controller.AdminOpAction">
		<property name="adminDAO">
			<ref bean="adminDAO" />
		</property>
	</bean>

</beans>